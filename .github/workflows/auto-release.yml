---
name: Auto Release

'on':
  push:
    branches: [main]
    paths:
      - 'youtube-speed-control.user.js'

permissions:
  contents: write

jobs:
  check-and-release:
    name: Check Version and Auto Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate userscript syntax
        id: validate_script
        run: |
          # Basic validation of userscript format
          if ! grep -q "// ==UserScript==" youtube-speed-control.user.js; then
            echo "Error: Invalid userscript format - missing UserScript header"
            exit 1
          fi

          if ! grep -q "// ==/UserScript==" youtube-speed-control.user.js; then
            echo "Error: Invalid userscript format - missing UserScript footer"
            exit 1
          fi

          echo "âœ… Userscript format validation passed"

      - name: Extract version from userscript
        id: extract_version
        run: |
          # Extract version number from userscript file
          if [ ! -f "youtube-speed-control.user.js" ]; then
            echo "Error: youtube-speed-control.user.js file not found"
            exit 1
          fi

          VERSION=$(grep -o "// @version.*" youtube-speed-control.user.js | \
            sed 's/\/\/ @version[[:space:]]*//')

          if [ -z "$VERSION" ]; then
            echo "Error: Unable to extract version from userscript"
            exit 1
          fi

          # Validate semantic versioning format
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+(\.[0-9]+)?$'; then
            echo "Error: Version $VERSION is not in semantic versioning format"
            exit 1
          fi

          echo "VERSION=v${VERSION}" >> $GITHUB_OUTPUT
          echo "RAW_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Detected version: v${VERSION}"

      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Tag $VERSION already exists"
          else
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Tag $VERSION does not exist, will create new release"
          fi

      - name: Create tag and release
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          RAW_VERSION="${{ steps.extract_version.outputs.RAW_VERSION }}"

          # Configure git user
          git config user.name "github-actions[bot]"
          git config user.email \
            "41898282+github-actions[bot]@users.noreply.github.com"

          # Create and push tag
          git tag -a "$VERSION" \
            -m "Release $VERSION - Auto-generated from userscript version"
          git push origin "$VERSION"

          echo "Created and pushed tag $VERSION"

      - name: Wait for release workflow
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        run: |
          echo "Tag created, existing release.yml workflow will trigger"
          echo "Version: ${{ steps.extract_version.outputs.VERSION }}"
